<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">

    <bean id="propertyConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:memcached.properties</value>
            </list>
        </property>
    </bean>

    <!-- Scans the classpath of this application for @Components to deploy as beans -->
    <context:component-scan base-package="com.bcgogo"/>

    <!-- Configures the @Controller programming model -->
    <!--<mvc:annotation-driven/>-->

    <!-- Either use above annotation-driven cnnfig to enable Annotation support in Controllers, or use 3 beans below. -->
    <!-- below 3 Beans are used to convert null to empty string when generating json using JacksonJson -->

    <bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping"/>
    <bean id="customObjectMapper" class="com.bcgogo.common.jackson.JacksonObjectMapperFactory" />
    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
        <property name="messageConverters">
            <list>
                <bean class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
                    <property name="objectMapper" ref="customObjectMapper" />
                </bean>
            </list>
        </property>
    </bean>

    <!--
          - This bean resolves specific types of exceptions to corresponding logical
          - view names for error views. The default behaviour of DispatcherServlet
          - is to propagate all exceptions to the servlet container: this will happen
          - here with all other types of exceptions.
      -->
    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">
            <props>
                <prop key="org.springframework.web.servlet.PageNotFound">pageNotFound</prop>
                <prop key="org.springframework.dao.DataAccessException">dataAccessFailure</prop>
                <prop key="org.springframework.transaction.TransactionException">dataAccessFailure</prop>
            </props>
        </property>
    </bean>

    <!-- RMI service, for Reindex solr-->
  <bean id="rmiServerProxy" class="org.springframework.remoting.rmi.RmiServiceExporter">
    <property name="service" ref="rmiSolrService" />
    <property name="serviceName" value="rmiSolrService" />
    <property name="serviceInterface" value="com.bcgogo.rmi.service.IRmiSolrService" />
    <property name="registryPort" value="19001" />
    <property name="servicePort" value="19001" />
  </bean>

    <!-- Forwards requests to the "/" resource to the "welcome" view -->
    <mvc:view-controller path="/" view-name="login"/>

    <!-- Resolves view names to protected .jsp resources within the /WEB-INF/views directory -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!--<property name="prefix" value="/WEB-INF/views/"/>-->
        <property name="suffix" value=".jsp"/>
    </bean>

    <!--file upload add by zhouxiaochen 2012-1-13-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- set the max upload size100MB -->
        <property name="maxUploadSize">
            <value>104857600</value>
        </property>
        <property name="maxInMemorySize">
            <value>4096</value>
        </property>
    </bean>

</beans>
