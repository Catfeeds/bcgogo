package com.bcgogo.driving.socket;

import com.bcgogo.pojox.util.BinaryUtil;
import com.bcgogo.pojox.util.StringUtil;
import org.apache.mina.core.buffer.IoBuffer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.UnsupportedEncodingException;

/**
 * Created by IntelliJ IDEA.
 * Author: ndong
 * Date: 15-8-7
 * Time: 上午10:37
 */
public class SocketHelper {
  private static final Logger LOG = LoggerFactory.getLogger(SocketHelper.class);


  public static void main(String[] args) throws UnsupportedEncodingException {
    String demo = "7E24863600065213552715091531161350C6120440030C000000FFFBDFFFFD41300052000000A6630002004F0101CC01451FBD8300000047C20133445566043344556605AA0000000C4E2000000DAA0000001F334455664230303030443344556646334455664C33445566880000000089000000028A000000008B00000000010C7E7E24863600065213552715091531161350C6120440030C000000FFFBDFFFFD41300052000000A6630002004F0101CC01451FBD8300000047C20133445566043344556605AA0000000C4E2000000DAA0000001F334455664230303030443344556646334455664C33445566880000000089000000028A000000008B00000000010C7E7E24863600065213552715091531161350C6120440030C000000FFFBDFFFFD41300052000000A6630002004F0101CC01451FBD8300000047C20133445566043344556605AA0000000C4E2000000DAA0000001F334455664230303030443344556646334455664C33445566880000000089000000028A000000008B00000000010C7E7E24863600065213552715091531161350C6120440030C000000FFFBDFFFFD41300052000000A6630002004F0101CC01451FBD8300000047C20133445566043344556605AA0000000C4E2000000DAA0000001F334455664230303030443344556646334455664C33445566880000000089000000028A000000008B00000000010C7E7E24863600065213552715091531161350C6120440030C000000FFFBDFFFFD41300052000000A6630002004F0101CC01451FBD8300000047C20133445566043344556605AA0000000C4E2000000DAA0000001F334455664230303030443344556646334455664C33445566880000000089000000028A000000008B00000000010C7E7E24863600065213552715091531161350C6120440030C000000FFFBDFFFFD41300052000000A6630002004F0101CC01451FBD8300000047C20133445566043344556605AA0000000C4E2000000DAA0000001F334455664230303030443344556646334455664C33445566880000000089000000028A000000008B00000000010C7E7E24863600065213552715091531161350C6120440030C000000FFFBDFFFFD41300052000000A6630002004F0101CC01451FBD8300000047C20133445566043344556605AA0000000C4E2000000DAA0000001F334455664230303030443344556646334455664C33445566880000000089000000028A000000008B00000000010C7E7E24863600065213552715091531161350C6120440030C000000FFFBDFFFFD41300052000000A6630002004F0101CC01451FBD8300000047C20133445566043344556605AA0000000C4E2000000DAA0000001F334455664230303030443344556646334455664C33445566880000000089000000028A000000008B00000000010C7E7E24863600065213552715091531161350C6120440030C000000FFFBDFFFFD41300052000000A6630002004F0101CC01451FBD8300000047C20133445566043344556605AA0000000C4E2000000DAA0000001F334455664230303030443344556646334455664C33445566880000000089000000028A000000008B00000000010C7E7E24863600065213552715091531161350C6120440030C000000FFFBDFFFFD41300052000000A6630002004F0101CC01451FBD8300000047C20133445566043344556605AA0000000C4E2000000DAA0000001F334455664230303030443344556646334455664C33445566880000000089000000028A000000008B00000000010C7E7E24863600065213552715091531161350C6120440030C000000FFFBDFFFFD41300052000000A6630002004F0101CC01451FBD8300000047C20133445566043344556605AA0000000C4E2000000DAA0000001F334455664230303030443344556646334455664C33445566880000000089000000028A000000008B00000000010C7E7E24863600065213552715091531161350C6120440030C000000FFFBDFFFFD41300052000000A6630002004F0101CC01451FBD8300000047C20133445566043344556605AA0000000C4E2000000DAA0000001F334455664230303030443344556646334455664C33445566880000000089000000028A000000008B00000000010C7E7E24863600065213552715091531161350C6120440030C000000FFFBDFFFFD41300052000000A6630002004F0101CC01451FBD8300000047C20133445566043344556605AA0000000C4E2000000DAA0000001F334455664230303030443344556646334455664C33445566880000000089000000028A000000008B00000000010C7E7E24863600065213552715091531161350C6120440030C000000FFFBDFFFFD41300052000000A6630002004F0101CC01451FBD8300000047C20133445566043344556605AA0000000C4E2000000DAA0000001F334455664230303030443344556646334455664C33445566880000000089000000028A000000008B00000000010C7E7E24863600065213552715091531161350C6120440030C000000FFFBDFFFFD41300052000000A6630002004F0101CC01451FBD8300000047C20133445566043344556605AA0000000C4E2000000DAA0000001F334455664230303030443344556646334455664C33445566880000000089000000028A000000008B00000000010C7E7E24863600065213552715091531161350C6120440030C000000FFFBDFFFFD41300052000000A6630002004F0101CC01451FBD8300000047C20133445566043344556605AA0000000C4E2000000DAA0000001F334455664230303030443344556646";
    String[] test = demo.split("7E");
    System.out.println(test);
  }

  /**
   * 下面根据不同的包计算长度
   *
   * @param in
   * @return
   * @throws java.io.UnsupportedEncodingException
   */
  public static int calPacketSize(IoBuffer in) throws UnsupportedEncodingException {
    String hexString = BinaryUtil.byte2HexString(getIoBuffer(in, in.remaining()));
    //只截取第一段完整的数据包
    hexString = hexString.substring(0, hexString.indexOf("7E", 2) + 2);
    return hexString.length() / 2;
  }


  /**
   * @param in
   * @param len
   * @return
   * @throws java.io.UnsupportedEncodingException
   */
  public static String getIoBufferHexString(IoBuffer in, int len) throws UnsupportedEncodingException {
    return BinaryUtil.byte2HexString(getIoBuffer(in, len));
  }

  /**
   * 获取IoBuffer len字节数的字符
   *
   * @param in
   * @param len
   * @return
   * @throws java.io.UnsupportedEncodingException
   */
  public static byte[] getIoBuffer(IoBuffer in, int len) throws UnsupportedEncodingException {
    if (len > in.remaining()) {
      return null;
    }
    byte[] sizeBytes = new byte[len];
    in.mark();//标记当前位置，以便reset
    in.get(sizeBytes, 0, len);//读取len长度的字节
    in.reset();
    return sizeBytes;
  }


  public static char hexChecksum(String hexString) throws UnsupportedEncodingException {
    if (StringUtil.isEmpty(hexString) || hexString.length() % 2 != 0) {
      return '\0';
    }
    //取第一个字符
    char result = BinaryUtil.hexString2String(hexString.substring(0, 2)).charAt(0);
    for (int i = 2; i < hexString.length(); i += 2) {
      char temp = BinaryUtil.hexString2String(hexString.substring(i, i + 2)).charAt(0);
      result ^= temp;
    }
    int tmp = result ^ '~';
    return (char) tmp;
  }

  public static String checksum(String str) {
    if (StringUtil.isEmpty(str)) return null;
    char result = str.charAt(0);
    for (int i = 1; i < str.length(); i++) {
      result ^= str.charAt(i);
    }
    int tmp = result ^ '~';
    return String.valueOf((char) tmp);
  }


}
